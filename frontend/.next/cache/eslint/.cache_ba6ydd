[{"/Users/josephkamil/marvelAI/frontend/pages/_app.tsx":"1","/Users/josephkamil/marvelAI/frontend/pages/api/[...path].ts":"2","/Users/josephkamil/marvelAI/frontend/pages/api/generate-image.ts":"3","/Users/josephkamil/marvelAI/frontend/pages/app.tsx":"4","/Users/josephkamil/marvelAI/frontend/pages/index.tsx":"5","/Users/josephkamil/marvelAI/frontend/src/App.bak.tsx":"6","/Users/josephkamil/marvelAI/frontend/src/App.tsx":"7","/Users/josephkamil/marvelAI/frontend/src/components/EditDialog.tsx":"8","/Users/josephkamil/marvelAI/frontend/src/components/ErrorBoundary.tsx":"9","/Users/josephkamil/marvelAI/frontend/src/components/ErrorDisplay.tsx":"10","/Users/josephkamil/marvelAI/frontend/src/components/ExportButton.tsx":"11","/Users/josephkamil/marvelAI/frontend/src/components/InputSection.tsx":"12","/Users/josephkamil/marvelAI/frontend/src/components/LayoutSelector.tsx":"13","/Users/josephkamil/marvelAI/frontend/src/components/LogViewer.tsx":"14","/Users/josephkamil/marvelAI/frontend/src/components/OutlineDisplay.tsx":"15","/Users/josephkamil/marvelAI/frontend/src/components/OutlineEditor.tsx":"16","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/SlideEditor.tsx":"17","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/SlideSorter.tsx":"18","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/EditorControls.tsx":"19","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/EditorToolbar.tsx":"20","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/ImageUploader.tsx":"21","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/LayoutSelector.tsx":"22","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/LayoutSwitcher.tsx":"23","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SavePresentation.tsx":"24","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SlideEditDialog.test.tsx":"25","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SlideEditDialog.tsx":"26","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SlideLayoutModal.tsx":"27","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SlideLayoutRenderer.tsx":"28","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SlideSorter.tsx":"29","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SortableSlide.tsx":"30","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/TiptapEditor.tsx":"31","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/TiptapSlideEditor.tsx":"32","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/utils.ts":"33","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/BaseLayout.tsx":"34","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/TitleBodyLayout.tsx":"35","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/TitleBulletsLayout.tsx":"36","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/TitleImageLayout.tsx":"37","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/TitleOnlyLayout.tsx":"38","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/TwoColumnLayout.tsx":"39","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/types.ts":"40","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/utils.ts":"41","/Users/josephkamil/marvelAI/frontend/src/components/SlidePreview.tsx":"42","/Users/josephkamil/marvelAI/frontend/src/components/types.ts":"43","/Users/josephkamil/marvelAI/frontend/src/config/api.ts":"44","/Users/josephkamil/marvelAI/frontend/src/config/index.ts":"45","/Users/josephkamil/marvelAI/frontend/src/config/types.ts":"46","/Users/josephkamil/marvelAI/frontend/src/config.ts":"47","/Users/josephkamil/marvelAI/frontend/src/main.tsx":"48","/Users/josephkamil/marvelAI/frontend/src/pages/index.tsx":"49","/Users/josephkamil/marvelAI/frontend/src/store/hooks.ts":"50","/Users/josephkamil/marvelAI/frontend/src/store/presentationSlice.ts":"51","/Users/josephkamil/marvelAI/frontend/src/store/store.ts":"52","/Users/josephkamil/marvelAI/frontend/src/types/global.d.ts":"53","/Users/josephkamil/marvelAI/frontend/src/utils/mui.d.ts":"54","/Users/josephkamil/marvelAI/frontend/src/utils/mui.ts":"55"},{"size":1296,"mtime":1747177672356,"results":"56","hashOfConfig":"57"},{"size":3602,"mtime":1747177672356,"results":"58","hashOfConfig":"57"},{"size":857,"mtime":1747177672356,"results":"59","hashOfConfig":"57"},{"size":257,"mtime":1747177672356,"results":"60","hashOfConfig":"57"},{"size":4332,"mtime":1747177672357,"results":"61","hashOfConfig":"57"},{"size":1759,"mtime":1747177672358,"results":"62","hashOfConfig":"57"},{"size":3403,"mtime":1747208226914,"results":"63","hashOfConfig":"57"},{"size":1279,"mtime":1747177672360,"results":"64","hashOfConfig":"57"},{"size":995,"mtime":1746522120421,"results":"65","hashOfConfig":"57"},{"size":677,"mtime":1747177672361,"results":"66","hashOfConfig":"57"},{"size":1082,"mtime":1747177672362,"results":"67","hashOfConfig":"57"},{"size":14392,"mtime":1747215955218,"results":"68","hashOfConfig":"57"},{"size":3374,"mtime":1747177672364,"results":"69","hashOfConfig":"57"},{"size":2724,"mtime":1746526253453,"results":"70","hashOfConfig":"57"},{"size":16031,"mtime":1747214165007,"results":"71","hashOfConfig":"57"},{"size":9506,"mtime":1747214225371,"results":"72","hashOfConfig":"57"},{"size":14117,"mtime":1747203383249,"results":"73","hashOfConfig":"57"},{"size":876,"mtime":1747177672368,"results":"74","hashOfConfig":"57"},{"size":2487,"mtime":1747205071709,"results":"75","hashOfConfig":"57"},{"size":2268,"mtime":1747177672400,"results":"76","hashOfConfig":"57"},{"size":7770,"mtime":1747177672401,"results":"77","hashOfConfig":"57"},{"size":6032,"mtime":1747196071578,"results":"78","hashOfConfig":"57"},{"size":5237,"mtime":1747177672407,"results":"79","hashOfConfig":"57"},{"size":7197,"mtime":1747214417623,"results":"80","hashOfConfig":"57"},{"size":2997,"mtime":1747206011987,"results":"81","hashOfConfig":"57"},{"size":22928,"mtime":1747204996691,"results":"82","hashOfConfig":"57"},{"size":3131,"mtime":1747177672413,"results":"83","hashOfConfig":"57"},{"size":1476,"mtime":1747203106117,"results":"84","hashOfConfig":"57"},{"size":5199,"mtime":1747177672415,"results":"85","hashOfConfig":"57"},{"size":1080,"mtime":1747177672417,"results":"86","hashOfConfig":"57"},{"size":4092,"mtime":1747177672417,"results":"87","hashOfConfig":"57"},{"size":2195,"mtime":1746522120428,"results":"88","hashOfConfig":"57"},{"size":1921,"mtime":1747177672419,"results":"89","hashOfConfig":"57"},{"size":1901,"mtime":1747216111627,"results":"90","hashOfConfig":"57"},{"size":5901,"mtime":1747205225809,"results":"91","hashOfConfig":"57"},{"size":9574,"mtime":1747216146702,"results":"92","hashOfConfig":"57"},{"size":5346,"mtime":1747205370092,"results":"93","hashOfConfig":"57"},{"size":1079,"mtime":1747177672424,"results":"94","hashOfConfig":"57"},{"size":2664,"mtime":1747177672425,"results":"95","hashOfConfig":"57"},{"size":3878,"mtime":1747177672425,"results":"96","hashOfConfig":"57"},{"size":2254,"mtime":1747196101863,"results":"97","hashOfConfig":"57"},{"size":19359,"mtime":1747206997892,"results":"98","hashOfConfig":"57"},{"size":2310,"mtime":1747212488344,"results":"99","hashOfConfig":"57"},{"size":986,"mtime":1747189424029,"results":"100","hashOfConfig":"57"},{"size":129,"mtime":1746692605342,"results":"101","hashOfConfig":"57"},{"size":791,"mtime":1747189435362,"results":"102","hashOfConfig":"57"},{"size":1080,"mtime":1747189405562,"results":"103","hashOfConfig":"57"},{"size":362,"mtime":1747177672436,"results":"104","hashOfConfig":"57"},{"size":1645,"mtime":1747177672438,"results":"105","hashOfConfig":"57"},{"size":350,"mtime":1747177672438,"results":"106","hashOfConfig":"57"},{"size":20270,"mtime":1747212865168,"results":"107","hashOfConfig":"57"},{"size":315,"mtime":1747211963204,"results":"108","hashOfConfig":"57"},{"size":1048,"mtime":1747177672441,"results":"109","hashOfConfig":"57"},{"size":2520,"mtime":1747179557542,"results":"110","hashOfConfig":"57"},{"size":2503,"mtime":1747179531561,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vuu0rn",{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/josephkamil/marvelAI/frontend/pages/_app.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/pages/api/[...path].ts",[],[],"/Users/josephkamil/marvelAI/frontend/pages/api/generate-image.ts",[],[],"/Users/josephkamil/marvelAI/frontend/pages/app.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/pages/index.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/App.bak.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/App.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/EditDialog.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/ErrorBoundary.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/ErrorDisplay.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/ExportButton.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/InputSection.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/LayoutSelector.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/LogViewer.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/OutlineDisplay.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/OutlineEditor.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/SlideEditor.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/SlideSorter.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/EditorControls.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/EditorToolbar.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/ImageUploader.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/LayoutSelector.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/LayoutSwitcher.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SavePresentation.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SlideEditDialog.test.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SlideEditDialog.tsx",["280"],[],"import React, { useState, useEffect, useCallback } from 'react';\nimport { ChromePicker } from 'react-color';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Grid,\n  Box,\n  Typography,\n  Stack,\n  Popover\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddIcon from '@mui/icons-material/Add';\nimport ImageIcon from '@mui/icons-material/Image';\nimport AutoAwesomeIcon from '@mui/icons-material/AutoAwesome';\nimport { Slide } from '../../types';\nimport { convertLayoutToFrontend, convertLayoutToBackend } from '../utils';\nimport ImageUploader from './ImageUploader';\nimport TiptapEditor from './TiptapEditor'; // Fix TiptapEditor import to use named import if required\nimport { HexColorPicker } from 'react-colorful';\n\ninterface SlideEditDialogProps {\n  open: boolean;\n  onClose: () => void;\n  slide: Slide;\n  topic?: any;\n  onSave: (slide: Slide) => void;\n  onImageUpload?: (file: File) => Promise<string>;\n  onImageGenerate?: (prompt: string, service?: string) => Promise<any>;\n}\n\nconst layoutOptions: { value: string; label: string; description: string }[] = [\n  {\n    value: 'title-only',\n    label: 'Title Only',\n    description: 'A single title, no subtitle or bullets',\n  },\n  {\n    value: 'title-bullets',\n    label: 'Title & Bullets',\n    description: 'A title with bullet points below',\n  },\n  {\n    value: 'title-bullets-image',\n    label: 'Title, Bullets & Image',\n    description: 'A title with bullet points and an image below',\n  },\n  {\n    value: 'title-image',\n    label: 'Title & Image',\n    description: 'A title with an image below',\n  },\n  {\n    value: 'two-column',\n    label: 'Two Columns',\n    description: 'Content split into two columns',\n  },\n];\n\nconst backgroundColors = [\n  { label: 'White', value: '#fff' },\n  { label: 'Blue', value: '#6366f1' },\n  { label: 'Black', value: '#18181b' },\n  { label: 'Gray', value: '#e5e7eb' },\n  { label: 'Custom...', value: 'custom' },\n];\n\nconst fontColors = [\n  { label: 'Black', value: '#222' },\n  { label: 'White', value: '#fff' },\n  { label: 'Blue', value: '#6366f1' },\n  { label: 'Gray', value: '#888' },\n  { label: 'Custom...', value: 'custom' },\n];\n\nconst SlideEditDialog: React.FC<SlideEditDialogProps> = ({\n  open,\n  onClose,\n  slide,\n  topic,\n  onSave,\n  onImageUpload,\n  onImageGenerate,\n}) => {\n  // Type definitions for bullet items\n  type BulletItem = string | { text: string };\n  type BulletArray = string[];\n\n  // Helper to parse bullets from HTML string to array\n  const parseBulletsFromHtml = (html: string): BulletArray => {\n    if (!html) return [];\n    if (typeof html !== 'string') return [];\n    \n    // If it's already an empty list\n    if (html.trim() === '<ul></ul>') return [];\n    \n    // Extract list items\n    const listItems = html\n      .replace(/<ul[^>]*>/g, '')\n      .replace(/<\\/ul>/g, '')\n      .split(/<li[^>]*>|<\\/li>/g)\n      .map(item => item.trim())\n      .filter(Boolean);\n      \n    return listItems;\n  };\n\n  // Helper to convert bullet array to HTML string\n  const bulletsToHtml = (bullets: BulletArray): string => {\n    if (!bullets || !bullets.length) return '<ul></ul>';\n    const validBullets = bullets.filter((b): b is string => typeof b === 'string');\n    return `<ul>${validBullets.map(b => `<li>${b}</li>`).join('')}</ul>`;\n  };\n\n  // Helper to normalize bullets to HTML string\n  function normalizeBulletsForDialog(bullets: unknown): string {\n    if (!bullets) return '<ul></ul>';\n    \n    // Handle string input\n    if (typeof bullets === 'string') {\n      const trimmed = bullets.trim();\n      if (!trimmed) return '<ul></ul>';\n      if (trimmed.startsWith('<ul')) return bullets;\n      if (trimmed.startsWith('<li>')) return `<ul>${bullets}</ul>`;\n      const lines = bullets.split('\\n').map(l => l.trim()).filter(Boolean);\n      if (lines.length) return `<ul>${lines.map(l => `<li>${l}</li>`).join('')}</ul>`;\n      return '<ul></ul>';\n    }\n    \n    // Handle array input\n    if (Array.isArray(bullets)) {\n      if (bullets.length === 0) return '<ul></ul>';\n      \n      const lines = bullets\n        .map(b => {\n          if (typeof b === 'string') return b;\n          if (b && typeof b === 'object' && 'text' in b) return (b as { text: string }).text;\n          return '';\n        })\n        .filter((b): b is string => Boolean(b));\n        \n      return bulletsToHtml(lines);\n    }\n    \n    return '<ul></ul>';\n  }\n\n  // Only update editedSlide when the dialog is opened or the slide changes (not on every render)\n  const [editedSlide, setEditedSlide] = useState<Slide>(() => {\n    const baseContent = {\n      ...slide.content,\n      bullets: normalizeBulletsForDialog(slide.content.bullets),\n    };\n    const layout = convertLayoutToFrontend(slide.layout);\n    if (!baseContent.image) {\n      baseContent.image = {\n        url: '',\n        alt: '',\n        prompt: '',\n        service: 'generated',\n      };\n    }\n    return {\n      ...slide,\n      layout,\n      content: baseContent,\n    };\n  });\n\n  useEffect(() => {\n    if (open) {\n      const validLayout = convertLayoutToFrontend(slide.layout);\n      const baseContent = {\n        ...slide.content,\n        bullets: normalizeBulletsForDialog(slide.content.bullets),\n      };\n      if (!baseContent.image) {\n        baseContent.image = {\n          url: '',\n          alt: '',\n          prompt: '',\n          service: 'generated',\n        };\n      }\n      setEditedSlide({\n        ...slide,\n        layout: validLayout,\n        content: baseContent,\n      });\n    }\n    // Only re-run when dialog opens or slide changes\n  }, [open, slide]);\n\n  const [bodyError, setBodyError] = useState<string | null>(null);\n  const [imageError, setImageError] = useState<string | null>(null);\n  const [colorPickerAnchorEl, setColorPickerAnchorEl] = useState<HTMLElement | null>(null);\n  const [currentColorType, setCurrentColorType] = useState<'background' | 'font' | null>(null);\n\n  const handleLayoutChange = (newLayout: string) => {\n    setEditedSlide((prev) => {\n      // Remove image if switching to a layout that does not support images\n      const imageLayouts = [\n        'title-bullets-image',\n        'title-image',\n        'two-column-image',\n      ];\n      const shouldKeepImage = imageLayouts.includes(newLayout);\n      return {\n        ...prev,\n        layout: newLayout,\n        content: {\n          ...prev.content,\n          image: shouldKeepImage ? prev.content.image : undefined,\n        },\n      };\n    });\n  };\n\n  const handleTitleChange = (content: string) => {\n    setEditedSlide({\n      ...editedSlide,\n      content: { ...editedSlide.content, title: content },\n    });\n  };\n\n  const handleSubtitleChange = (value: string) => {\n    setEditedSlide({\n      ...editedSlide,\n      content: { ...editedSlide.content, subtitle: value },\n    });\n  };\n\n  const handleBodyChange = (content: string) => {\n    setEditedSlide({\n      ...editedSlide,\n      content: { ...editedSlide.content, body: content },\n    });\n  };\n\n  const handleBulletAdd = () => {\n    // Parse the current bullets HTML string into an array, add a new empty bullet, then convert back to HTML string\n    const bulletsArr = parseBulletsFromHtml(\n      typeof editedSlide.content.bullets === 'string' \n        ? editedSlide.content.bullets \n        : '<ul></ul>'\n    );\n    bulletsArr.push('');\n    \n    setEditedSlide({\n      ...editedSlide,\n      content: {\n        ...editedSlide.content,\n        bullets: bulletsToHtml(bulletsArr),\n      },\n    });\n  };\n\n  const handleBulletChange = (index: number, value: string) => {\n    // Parse HTML to array, update the bullet at the given index, then convert back to HTML\n    const bulletsArr = parseBulletsFromHtml(\n      typeof editedSlide.content.bullets === 'string' \n        ? editedSlide.content.bullets \n        : '<ul></ul>'\n    );\n    \n    // Update the bullet at the given index\n    if (index >= 0 && index < bulletsArr.length) {\n      bulletsArr[index] = value;\n    } else if (index === bulletsArr.length) {\n      bulletsArr.push(value);\n    }\n    \n    setEditedSlide({\n      ...editedSlide,\n      content: {\n        ...editedSlide.content,\n        bullets: bulletsToHtml(bulletsArr),\n      },\n    });\n  };\n\n  const handleBulletDelete = (index: number) => {\n    // Parse HTML to array, remove the bullet at the given index, then convert back to HTML\n    const bulletsArr = parseBulletsFromHtml(\n      typeof editedSlide.content.bullets === 'string' \n        ? editedSlide.content.bullets \n        : '<ul></ul>'\n    );\n    \n    // Remove the bullet at the given index if it exists\n    if (index >= 0 && index < bulletsArr.length) {\n      bulletsArr.splice(index, 1);\n    }\n    \n    setEditedSlide({\n      ...editedSlide,\n      content: {\n        ...editedSlide.content,\n        bullets: bulletsToHtml(bulletsArr),\n      },\n    });\n  };\n\n  const handleColumnLeftChange = (content: string) => {\n    setEditedSlide({\n      ...editedSlide,\n      content: {\n        ...editedSlide.content,\n        columnLeft: content,\n      },\n    });\n  };\n\n  const handleColumnRightChange = (content: string) => {\n    setEditedSlide({\n      ...editedSlide,\n      content: {\n        ...editedSlide.content,\n        columnRight: content,\n      },\n    });\n  };\n\n  const handleImageChange = useCallback((image: any) => {\n    setEditedSlide((prev) => ({\n      ...prev,\n      content: {\n        ...prev.content,\n        image,\n      },\n    }));\n  }, []);\n\n  const handleImageGenerate = useCallback(async (prompt: string, service: string = 'dalle'): Promise<any> => {\n    if (!onImageGenerate) {\n      throw new Error('onImageGenerate is not defined');\n    }\n    const image = await onImageGenerate(prompt, service);\n    handleImageChange(image);\n    return image;\n  }, [onImageGenerate, handleImageChange]);\n\n  const handleBgColorChange = (color: string) => {\n    // If selecting 'custom', don't update the color yet\n    if (color === 'custom') return;\n    \n    setEditedSlide((prev) => ({\n      ...prev,\n      backgroundColor: color,\n    }));\n  };\n\n  const handleFontColorChange = (color: string) => {\n    // If selecting 'custom', don't update the color yet\n    if (color === 'custom') return;\n    \n    setEditedSlide((prev) => ({\n      ...prev,\n      fontColor: color,\n    }));\n  };\n\n  const handleColorPickerOpen = (event: React.MouseEvent<HTMLElement>, type: 'background' | 'font') => {\n    event.stopPropagation();\n    event.preventDefault();\n    setCurrentColorType(type);\n    setColorPickerAnchorEl(event.currentTarget);\n  };\n\n  const handleColorPickerClose = () => {\n    setColorPickerAnchorEl(null);\n    setCurrentColorType(null);\n  };\n\n  const handleCustomColorChange = (color: any) => {\n    if (!color || !color.hex) return;\n    \n    if (currentColorType === 'background') {\n      setEditedSlide(prev => ({\n        ...prev,\n        backgroundColor: color.hex\n      }));\n    } else if (currentColorType === 'font') {\n      setEditedSlide(prev => ({\n        ...prev,\n        fontColor: color.hex\n      }));\n    }\n  };\n\n  useEffect(() => {\n    if ((editedSlide.layout === 'title-bullets' || editedSlide.layout === 'title-bullets-image')) {\n      const bullets = editedSlide.content.bullets;\n      const isEmpty = !bullets || \n                    (typeof bullets === 'string' && bullets.trim() === '') ||\n                    (Array.isArray(bullets) && bullets.length === 0);\n      \n      if (isEmpty) {\n        setBodyError('Bullet points are empty or missing.');\n      } else {\n        setBodyError(null);\n      }\n    } else {\n      setBodyError(null);\n    }\n  }, [editedSlide.layout, editedSlide.content.bullets]);\n\n  useEffect(() => {\n    if (editedSlide.layout.includes('image')) {\n      if (!editedSlide.content.image || !editedSlide.content.image.url) {\n        setImageError('Image is missing or not set. You can save without an image, or generate/upload one below.');\n      } else {\n        setImageError(null);\n      }\n    } else {\n      setImageError(null);\n    }\n  }, [editedSlide.layout, editedSlide.content.image]);\n\n  const handleSave = () => {\n    onSave({\n      ...editedSlide,\n      content: {\n        ...editedSlide.content,\n        title: getHtmlContent(editedSlide.content.title),\n        body: getHtmlContent(editedSlide.content.body),\n        bullets: getHtmlContent(editedSlide.content.bullets),\n      },\n    });\n    onClose();\n  };\n\n  const getHtmlContent = (content: any): string => {\n    if (!content) return '';\n    if (typeof content !== 'string') return '';\n    if (content.startsWith('<')) return content;\n    return `<p>${content}</p>`;\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>Edit Slide</DialogTitle>\n      <DialogContent>\n        {(editedSlide.layout === 'title-bullets-image' || editedSlide.layout === 'title-image') && (\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\n            <Button\n              onClick={() => handleImageGenerate(editedSlide.content.title || topic?.title || 'Generate slide content')}\n              startIcon={<AutoAwesomeIcon />}\n              variant=\"outlined\"\n              color=\"secondary\"\n              sx={{ minWidth: 180 }}\n            >\n              AI Generate Image\n            </Button>\n          </Box>\n        )}\n        <Box sx={{\n          position: 'sticky',\n          top: 0,\n          zIndex: 2,\n          bgcolor: 'background.paper',\n          pb: 1,\n          pt: 1,\n          mb: 2,\n          borderBottom: 1,\n          borderColor: 'divider',\n        }}>\n          <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n            <FormControl size=\"small\" sx={{ minWidth: 180 }}>\n              <InputLabel id=\"bg-color-label\">Slide Background</InputLabel>\n              <Select\n                labelId=\"bg-color-label\"\n                value={editedSlide.backgroundColor}\n                label=\"Slide Background\"\n                onChange={(e) => handleBgColorChange(e.target.value as string)}\n                renderValue={(value) => (\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <Box\n                      sx={{\n                        width: 20,\n                        height: 20,\n                        backgroundColor: value === 'custom' ? (editedSlide.backgroundColor || '#ffffff') : value,\n                        border: '1px solid #ccc',\n                        borderRadius: '50%',\n                      }}\n                    />\n                    {value === 'custom' ? 'Custom' : value}\n                  </Box>\n                )}\n              >\n                {backgroundColors.map((opt) => (\n                  <MenuItem \n                    key={opt.value} \n                    value={opt.value}\n                    onClick={(e) => {\n                      if (opt.value === 'custom') {\n                        e.preventDefault();\n                        handleColorPickerOpen(e as any, 'background');\n                      }\n                    }}\n                  >\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <Box\n                        sx={{\n                          width: 20,\n                          height: 20,\n                          backgroundColor: opt.value === 'custom' ? 'transparent' : opt.value,\n                          border: '1px solid #ccc',\n                          borderRadius: '50%',\n                          background: opt.value === 'custom' ? 'linear-gradient(45deg, #ff0000, #ff9900, #ffff00, #33cc33, #3399ff, #cc33ff, #ff0066)' : 'none'\n                        }}\n                      />\n                      {opt.label}\n                    </Box>\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <FormControl size=\"small\" sx={{ minWidth: 180 }}>\n              <InputLabel id=\"font-color-label\">Font Color</InputLabel>\n              <Select\n                labelId=\"font-color-label\"\n                value={editedSlide.fontColor}\n                label=\"Font Color\"\n                onChange={(e) => handleFontColorChange(e.target.value as string)}\n                renderValue={(value) => (\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <Box\n                      sx={{\n                        width: 20,\n                        height: 20,\n                        backgroundColor: value === 'custom' ? (editedSlide.fontColor || '#000000') : value,\n                        border: '1px solid #ccc',\n                        borderRadius: '50%',\n                      }}\n                    />\n                    {value === 'custom' ? 'Custom' : value}\n                  </Box>\n                )}\n              >\n                {fontColors.map((opt) => (\n                  <MenuItem \n                    key={opt.value} \n                    value={opt.value}\n                    onClick={(e) => {\n                      if (opt.value === 'custom') {\n                        e.preventDefault();\n                        handleColorPickerOpen(e as any, 'font');\n                      }\n                    }}\n                  >\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <Box\n                        sx={{\n                          width: 20,\n                          height: 20,\n                          backgroundColor: opt.value === 'custom' ? 'transparent' : opt.value,\n                          border: '1px solid #ccc',\n                          borderRadius: '50%',\n                          background: opt.value === 'custom' ? 'linear-gradient(45deg, #000000, #666666, #999999, #cccccc, #ffffff)' : 'none'\n                        }}\n                      />\n                      {opt.label}\n                    </Box>\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Stack>\n        </Box>\n        <Stack spacing={3} sx={{ mt: 1 }}>\n          <FormControl fullWidth sx={{ mb: 2 }}>\n            <InputLabel id=\"layout-label\">Layout</InputLabel>\n            <Select\n              labelId=\"layout-label\"\n              value={editedSlide.layout}\n              label=\"Layout\"\n              onChange={(e) => handleLayoutChange(e.target.value as string)}\n            >\n              {layoutOptions.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <TiptapEditor\n            content={getHtmlContent(editedSlide.content.title)}\n            onChange={handleTitleChange}\n            placeholder=\"Enter slide title...\"\n          />\n          {(editedSlide.layout !== 'title-only') && (\n            <TextField\n              label=\"Subtitle\"\n              fullWidth\n              value={editedSlide.content.subtitle || ''}\n              onChange={(e) => handleSubtitleChange(e.target.value)}\n            />\n          )}\n          {(editedSlide.layout === 'title-body' || editedSlide.layout === 'title-body-image') && (\n            <TiptapEditor\n              content={getHtmlContent(editedSlide.content.body)}\n              onChange={handleBodyChange}\n              placeholder=\"Enter slide body...\"\n            />\n          )}\n          {(editedSlide.layout === 'title-bullets' || editedSlide.layout === 'title-bullets-image') && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>Bullet Points</Typography>\n              {(() => {\n                // Parse HTML to array for editing using our helper function\n                const bulletsArr = parseBulletsFromHtml(\n                  typeof editedSlide.content.bullets === 'string' \n                    ? editedSlide.content.bullets \n                    : '<ul></ul>'\n                );\n                \n                return bulletsArr.map((bullet, index) => (\n                  <Box key={index} sx={{ display: 'flex', gap: 1, mb: 1 }}>\n                    <TextField\n                      fullWidth\n                      value={bullet}\n                      onChange={e => handleBulletChange(index, e.target.value)}\n                      placeholder={`Bullet point ${index + 1}`}\n                    />\n                    <IconButton onClick={() => handleBulletDelete(index)}>\n                      <DeleteIcon />\n                    </IconButton>\n                  </Box>\n                ));\n              })()}\n              <Button onClick={handleBulletAdd} variant=\"outlined\" sx={{ mt: 1 }}>\n                Add Bullet\n              </Button>\n            </Box>\n          )}\n          {editedSlide.layout === 'two-column' && (\n            <Grid container spacing={2}>\n              <Grid item xs={6}>\n                <TiptapEditor\n                  content={getHtmlContent(editedSlide.content.columnLeft)}\n                  onChange={handleColumnLeftChange}\n                  placeholder=\"Enter left column content...\"\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <TiptapEditor\n                  content={getHtmlContent(editedSlide.content.columnRight)}\n                  onChange={handleColumnRightChange}\n                  placeholder=\"Enter right column content...\"\n                />\n              </Grid>\n            </Grid>\n          )}\n          {(editedSlide.layout === 'title-image' || \n            editedSlide.layout === 'title-bullets-image') && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>Image</Typography>\n              <ImageUploader\n                image={editedSlide.content.image}\n                onImageChange={handleImageChange}\n                onImageUpload={onImageUpload}\n                onImageGenerate={handleImageGenerate}\n                prompt={editedSlide.content.title || topic?.title || 'Generate slide content'}\n              />\n              {imageError && (\n                <Typography color=\"warning\" variant=\"body2\" sx={{ mt: 1 }}>{imageError}</Typography>\n              )}\n            </Box>\n          )}\n        </Stack>\n      </DialogContent>\n      <DialogActions>\n        <Popover\n          open={Boolean(colorPickerAnchorEl)}\n          anchorEl={colorPickerAnchorEl}\n          onClose={handleColorPickerClose}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n        >\n          <ChromePicker\n            color={currentColorType === 'background' \n              ? editedSlide.backgroundColor || '#ffffff' \n              : editedSlide.fontColor || '#000000'}\n            onChange={handleCustomColorChange}\n          />\n        </Popover>\n        <Button onClick={onClose}>Cancel</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default SlideEditDialog;\n","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SlideLayoutModal.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SlideLayoutRenderer.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SlideSorter.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/SortableSlide.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/TiptapEditor.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/TiptapSlideEditor.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/components/utils.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/BaseLayout.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/TitleBodyLayout.tsx",["281"],[],"import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport BaseLayout from './BaseLayout';\nimport { Rnd } from 'react-rnd';\n\nconst ContentContainer = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(4),\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'flex-start',\n  alignItems: 'stretch',\n  gap: theme.spacing(2)\n}));\n\nconst TitleContainer = styled(Box)(({ theme }) => ({\n  fontSize: '2.5rem',\n  fontWeight: 'bold',\n  color: theme.palette.text.primary,\n  marginTop: 0,\n  marginBottom: '2.2rem',\n  textAlign: 'center',\n}));\n\ninterface TitleBodyLayoutProps {\n  slide: any;\n  onChange: (slide: any) => void;\n  onImageUpload?: (file: File) => Promise<string>;\n  onImageGenerate?: (prompt: string, service?: string) => Promise<any>;\n}\n\nconst TitleBodyLayout: React.FC<TitleBodyLayoutProps> = ({ \n  slide, \n  onChange\n}) => {\n  // Helper to ensure HTML for TiptapEditor\n  const ensureHtml = (value: string | undefined) => {\n    if (!value) return '';\n    if (typeof value !== 'string') return '';\n    return value.trim().startsWith('<') ? value : `<p>${value}</p>`;\n  };\n\n  return (\n    <BaseLayout>\n      <ContentContainer>\n        {/* Title at the top, styled like TitleBulletsLayout */}\n        <TitleContainer\n          style={{\n            background: '#fffbe7',\n            color: 'black',\n            zIndex: 2,\n            fontSize: '3.2rem',\n            fontWeight: 700,\n            minHeight: 48,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            letterSpacing: '-0.04em',\n            lineHeight: 1.1,\n            marginBottom: '0.5rem',\n          }}\n        >\n          {slide.content.title && typeof slide.content.title === 'string' ? (\n            <span dangerouslySetInnerHTML={{ __html: ensureHtml(slide.content.title) }} />\n          ) : (\n            <span style={{color:'#bbb'}}>[No Title]</span>\n          )}\n        </TitleContainer>\n        {/* Show draggable/resizable image at the very top if present */}\n        {slide.content.image && slide.content.image.url && (\n          <Rnd\n            bounds=\"parent\"\n            size={{\n              width: slide.content.image.width || 400,\n              height: slide.content.image.height || 300,\n            }}\n            position={{\n              x: slide.content.image.x || 0,\n              y: slide.content.image.y || 0,\n            }}\n            minWidth={120}\n            minHeight={80}\n            maxWidth={800}\n            maxHeight={600}\n            dragHandleClassName=\"draggable-image-handle\"\n            onDragStop={(e, d) => {\n              if (!slide.content.image) return;\n              onChange({\n                ...slide,\n                content: {\n                  ...slide.content,\n                  image: {\n                    ...slide.content.image,\n                    x: d.x,\n                    y: d.y,\n                    url: slide.content.image.url || '',\n                    alt: slide.content.image.alt || '',\n                    service: slide.content.image.service || 'upload',\n                  },\n                },\n              });\n            }}\n            onResizeStop={(e, direction, ref, delta, position) => {\n              if (!slide.content.image) return;\n              onChange({\n                ...slide,\n                content: {\n                  ...slide.content,\n                  image: {\n                    ...slide.content.image,\n                    width: parseInt(ref.style.width, 10),\n                    height: parseInt(ref.style.height, 10),\n                    x: position.x,\n                    y: position.y,\n                    url: slide.content.image.url || '',\n                    alt: slide.content.image.alt || '',\n                    service: slide.content.image.service || 'upload',\n                  },\n                },\n              });\n            }}\n            style={{ zIndex: 2, display: 'block', margin: '0 auto 2.5rem auto' }}\n          >\n            <img\n              src={slide.content.image.url}\n              alt={slide.content.image.alt || 'Slide image'}\n              style={{ \n                width: '100%', \n                height: '100%', \n                objectFit: 'contain', \n                borderRadius: 8, \n                cursor: 'grab',\n                transition: 'box-shadow 0.2s, transform 0.1s'\n              }}\n              className=\"draggable-image-handle\"\n              draggable={false}\n            />\n          </Rnd>\n        )}\n        {/* Body below title (and image if present), styled like TitleBulletsLayout */}\n        <Box\n          className=\"slide-body\"\n          sx={{\n            fontSize: '2rem',\n            color: '#222',\n            display: 'block',\n            marginTop: '0.5rem',\n            textAlign: 'left',\n            lineHeight: 1.35,\n            maxWidth: '100%',\n            minHeight: 120,\n            wordBreak: 'break-word',\n            p: 2,\n            borderRadius: 2,\n            boxShadow: slide.content.body ? '0 1px 8px rgba(0,0,0,0.05)' : 'none',\n            mt: 2,\n            fontFamily: 'inherit',\n            overflow: 'visible',\n            width: '100%',\n            background: '#fff',\n            fontWeight: 400,\n            letterSpacing: '-0.01em',\n          }}\n        >\n          {slide.content.body && typeof slide.content.body === 'string' ? (\n            <span\n              style={{fontSize:'2rem',fontWeight:400,lineHeight:1.35,letterSpacing:'-0.01em',color:'#222'}}\n              dangerouslySetInnerHTML={{ __html: ensureHtml(slide.content.body) }}\n            />\n          ) : (\n            <span style={{ color: '#bbb' }}>[No Body Content]</span>\n          )}\n        </Box>\n      </ContentContainer>\n    </BaseLayout>\n  );\n};\n\nexport default TitleBodyLayout;\n","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/TitleBulletsLayout.tsx",["282"],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/TitleImageLayout.tsx",["283"],[],"import React, { useCallback, useState, useEffect } from 'react';\nimport { Box, Paper, styled, Typography, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport ImageUploader from '../components/ImageUploader';\nimport { Slide, SlideContent, SlideImage, ImageService } from '../../types';\nimport Image from 'next/image';\nimport { Rnd } from 'react-rnd';\n\nconst BaseLayout = styled(Paper)(({ theme }) => ({\n  width: '100%',\n  aspectRatio: '16/9',\n  padding: theme.spacing(4),\n  display: 'flex',\n  flexDirection: 'column',\n  gap: theme.spacing(3),\n  backgroundColor: 'transparent',\n}));\n\nconst TitleContainer = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(4),\n  fontWeight: 700,\n  fontSize: 28,\n  color: 'black',\n  textAlign: 'left',\n  width: '100%'\n}));\n\nconst SlideArea = styled(Box)(({ theme }) => ({\n  position: 'relative',\n  width: '100%',\n  height: 600, \n  display: 'flex',\n  flexDirection: 'column',\n}));\n\nconst ImageArea = styled(Box)(({ theme }) => ({\n  position: 'relative',\n  flex: '1 1 0%',\n  minHeight: 0,\n  height: '100%',\n  width: '100%',\n  background: '#fffbe7',\n  margin: '0 auto',\n  display: 'block',\n}));\n\ninterface TitleImageLayoutProps {\n  slide: Slide;\n  onChange: (slide: Slide) => void;\n  onImageUpload?: (file: File) => Promise<string>;\n  onImageGenerate?: (prompt: string, service?: ImageService) => Promise<SlideImage>;\n}\n\nconst getValidImage = (img: unknown): SlideImage | undefined => {\n  if (!img || typeof img !== 'object') return undefined;\n  const imageObj = img as Partial<SlideImage>;\n  return {\n    ...imageObj,\n    url: imageObj.url || '', // Always a string\n    alt: imageObj.alt || '',\n    service: imageObj.service || 'upload',\n    x: imageObj.x || 0,\n    y: imageObj.y || 0,\n    width: imageObj.width || 300,\n    height: imageObj.height || 200,\n  };\n};\n\nconst TitleImageLayout: React.FC<TitleImageLayoutProps> = ({ slide, onChange, onImageUpload, onImageGenerate }) => {\n  const handleTitleChange = (title: string) => {\n    onChange({\n      ...slide,\n      content: {\n        ...slide.content,\n        title,\n      },\n    });\n  };\n\n  const handleImageChange = useCallback((image: SlideImage) => {\n    onChange({\n      ...slide,\n      content: {\n        ...slide.content,\n        image,\n      },\n    });\n  }, [slide, onChange]);\n\n  const image = getValidImage(slide.content.image);\n\n  return (\n    <BaseLayout elevation={1}>\n      <SlideArea>\n        {/* Title at the top, padded */}\n        {slide.content.title && (\n          <TitleContainer>\n            {slide.content.title}\n          </TitleContainer>\n        )}\n        {/* ImageArea fills the rest of the slide below the title */}\n        <ImageArea>\n          {image && image.url && (\n            <Rnd\n              bounds=\"parent\"\n              size={{\n                width: image.width || 400,\n                height: image.height || 300,\n              }}\n              position={{\n                x: image.x || 0,\n                y: image.y || 0,\n              }}\n              minWidth={120}\n              minHeight={80}\n              maxWidth={800}\n              maxHeight={600}\n              dragHandleClassName=\"draggable-image-handle\"\n              onDragStop={(e, d) => {\n                onChange({\n                  ...slide,\n                  content: {\n                    ...slide.content,\n                    image: {\n                      ...image,\n                      x: d.x,\n                      y: d.y,\n                      url: image.url || '',\n                      alt: image.alt || '',\n                      service: image.service || 'upload',\n                    },\n                  },\n                });\n              }}\n              onResizeStop={(e, direction, ref, delta, position) => {\n                onChange({\n                  ...slide,\n                  content: {\n                    ...slide.content,\n                    image: {\n                      ...image,\n                      width: parseInt(ref.style.width, 10),\n                      height: parseInt(ref.style.height, 10),\n                      x: position.x,\n                      y: position.y,\n                      url: image.url || '',\n                      alt: image.alt || '',\n                      service: image.service || 'upload',\n                    },\n                  },\n                });\n              }}\n              style={{ zIndex: 2, display: 'block', margin: '0 auto 2.5rem auto' }}\n            >\n              <img\n                src={image.url}\n                alt={image.alt || 'Slide image'}\n                className=\"draggable-image-handle\"\n                draggable={false}\n                style={{\n                  width: '100%',\n                  height: '100%',\n                  objectFit: 'contain',\n                  borderRadius: 8,\n                  boxShadow: '0 2px 8px rgba(0,0,0,0.10)',\n                  cursor: 'grab',\n                  transition: 'box-shadow 0.2s, transform 0.1s',\n                  userSelect: 'none',\n                }}\n              />\n            </Rnd>\n          )}\n        </ImageArea>\n        <Box>\n          <ImageUploader\n            image={image}\n            onImageChange={handleImageChange}\n            onImageUpload={onImageUpload}\n          />\n        </Box>\n      </SlideArea>\n    </BaseLayout>\n  );\n};\n\nexport default TitleImageLayout;\n","/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/TitleOnlyLayout.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/layouts/TwoColumnLayout.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/types.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlideEditor/utils.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/SlidePreview.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/components/types.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/config/api.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/config/index.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/config/types.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/config.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/main.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/pages/index.tsx",[],[],"/Users/josephkamil/marvelAI/frontend/src/store/hooks.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/store/presentationSlice.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/store/store.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/types/global.d.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/utils/mui.d.ts",[],[],"/Users/josephkamil/marvelAI/frontend/src/utils/mui.ts",[],[],{"ruleId":"284","severity":1,"message":"285","line":204,"column":6,"nodeType":"286","endLine":204,"endColumn":19,"suggestions":"287"},{"ruleId":"288","severity":1,"message":"289","line":125,"column":13,"nodeType":"290","endLine":138,"endColumn":15},{"ruleId":"288","severity":1,"message":"289","line":278,"column":13,"nodeType":"290","endLine":284,"endColumn":15},{"ruleId":"288","severity":1,"message":"289","line":154,"column":15,"nodeType":"290","endLine":169,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'normalizeBulletsForDialog'. Either include it or remove the dependency array.","ArrayExpression",["291"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement",{"desc":"292","fix":"293"},"Update the dependencies array to be: [normalizeBulletsForDialog, open, slide]",{"range":"294","text":"295"},[5681,5694],"[normalizeBulletsForDialog, open, slide]"]